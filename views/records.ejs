<div class="list-page">
	<h2>Messwerte</h2>
	
	<!-- Control buttons -->
	<div class="list-controls">
		<div class="list-info">
			<p>Zeige <%= records.length %> von <%= pagination.total %> Messwerten</p>
		</div>
		<div class="control-buttons">
			<button type="button" id="columns-button" class="control-button">Spaltenauswahl</button>
			<button type="button" id="filter-button" class="control-button">Filtern</button>
		</div>
	</div>
	
	<!-- Column Selection Overlay Panel -->
	<div id="columns-panel" class="overlay-panel">
		<h3>Spaltenauswahl</h3>
		<form action="/records" method="GET" id="columns-form">
			<!-- Preserve existing query parameters -->
			<input type="hidden" name="page" value="<%= pagination.currentPage %>">
			<input type="hidden" name="limit" value="<%= pagination.limit %>">
			
			<div class="column-checkboxes">
				<% columns.all.forEach(column => { %>
					<div class="column-checkbox">
						<input 
							type="checkbox" 
							id="col-<%= column %>" 
							<%= columns.defaultDeselected.includes(column) ? 'data-default-deselected="true"' : '' %>
							<%= columns.selected.includes(column) ? 'checked' : '' %>
						>
						<label for="col-<%= column %>"><%= columnCaption(column) %></label>
					</div>
				<% }); %>
			</div>
			
			<input type="hidden" name="columns" id="columns-param" value="">
			<div class="panel-actions">
				<button type="button" class="cancel">Abbrechen</button>
				<button type="submit">Anwenden</button>
			</div>
		</form>
	</div>
	
	<!-- Filter Overlay Panel -->
	<div id="filter-panel" class="overlay-panel">
		<h3>Filter</h3>
		<form action="/records" method="GET" id="filter-form">
			<!-- Preserve existing query parameters -->
			<input type="hidden" name="page" value="1">
			<input type="hidden" name="limit" value="<%= pagination.limit %>">
			<input type="hidden" name="columns" value="<%= getColumnQueryParam().replace('&columns=', '') %>">
			
			<div id="filter-conditions">
				<% if (filters && filters.length > 0) { %>
					<% filters.forEach((filter, index) => { %>
						<div class="filter-condition" data-index="<%= index %>">
							<select name="filter_column[]" class="filter-column">
								<% columns.all.forEach(column => { %>
									<option value="<%= column %>" <%= filter.column === column ? 'selected' : '' %>>
										<%= columnCaption(column) %>
									</option>
								<% }); %>
							</select>
							<select name="filter_operator[]" class="filter-operator">
								<% Object.entries(filterOperators).forEach(op => { %>
									<option value="<%= op %>" <%= filter.operator === op ? 'selected' : '' %>><%= operatorCaption(op) %></option>
								<% }); %>
							</select>
							<input type="text" name="filter_value[]" class="filter-value" value="<%= filter.value %>" placeholder="Wert">
							<button type="button" class="remove-filter">Entfernen</button>
						</div>
					<% }); %>
				<% } else { %>
					<div class="filter-condition" data-index="0">
						<select name="filter_column[]" class="filter-column">
							<% columns.all.forEach(column => { %>
								<option value="<%= column %>"><%= columnCaption(column) %></option>
							<% }); %>
						</select>
						<select name="filter_operator[]" class="filter-operator">
							<% Object.entries(filterOperators).forEach(op => { %>
								<option value="<%= op %>"><%= operatorCaption(op) %></option>
							<% }); %>
						</select>
						<input type="text" name="filter_value[]" class="filter-value" placeholder="Wert">
						<button type="button" class="remove-filter">Entfernen</button>
					</div>
				<% } %>
			</div>
			
			<div class="filter-actions">
				<button type="button" id="add-filter">Filter hinzufügen</button>
			</div>
			
			<div class="panel-actions">
				<% if (filters && filters.length > 0) { %>
					<a href="/records?columns=<%= getColumnQueryParam().replace('&columns=', '') %>" class="clear-filters">Filter zurücksetzen</a>
				<% } %>
				<button type="button" class="cancel">Abbrechen</button>
				<button type="submit">Anwenden</button>
			</div>
		</form>
	</div>
	
	<div class="table-container">
		<table class="list-table">
			<thead>
				<tr>
					<!-- ID column is always displayed -->
					<th><div class="th-content">#</div></th>
					<!-- Dynamic columns -->
					<% columns.selected.forEach(column => { %>
						<th><div class="th-content"><%= columnCaption(column) %></div></th>
					<% }); %>
				</tr>
			</thead>
			<tbody>
				<% records.forEach(record => { %>
					<tr>
						<!-- ID column is always displayed -->
						<td><a href="/record/<%= record.id %>"><%= record.id %></a></td>
						<!-- Dynamic columns -->
						<% columns.selected.forEach(column => {
							let { value, link, classes } = record.columnOutput(column);
							%>
							<td class="<%= classes.join(' ') %>"><span>
								<% if (link) { %>
									<a href="<%= link %>"><%= value %></a>
								<% } else { %>
									<%= value %>
								<% } %>
							</span></td>
						<% }); %>
					</tr>
				<% }); %>
			</tbody>
		</table>
	</div>

	<!-- Bottom bar with info and pagination -->
	<div class="list-bottom-bar">
		<% if (pagination.totalPages > 1) { %>
			<div class="pagination">
				<% if (pagination.currentPage > 1) { %>
					<a href="/records?page=1<%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&laquo;</a>
					<a href="/records?page=<%= pagination.currentPage - 1 %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&lsaquo;</a>
				<% } %>
				
				<% for (let i = Math.max(1, pagination.currentPage - 2); i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) { %>
					<a href="/records?page=<%= i %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link <%= i === pagination.currentPage ? 'active' : '' %>"><%= i %></a>
				<% } %>
				
				<% if (pagination.currentPage < pagination.totalPages) { %>
					<a href="/records?page=<%= pagination.currentPage + 1 %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&rsaquo;</a>
					<a href="/records?page=<%= pagination.totalPages %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&raquo;</a>
				<% } %>
			</div>
		<% } else { %>
			<div class="pagination"></div> <!-- Empty div to maintain flex layout -->
		<% } %>
	</div>
</div>

<script>
	// Helper function to update column selection
	function updateColumnSelection(checkbox) {
		const columnsParam = document.getElementById('columns-param');
		const selectedColumns = [];
		const deselectedColumns = [];
		let includesDefaultDeselected = false;
		
		// Collect all checked columns
		document.querySelectorAll('.column-checkbox input').forEach(input => {
			const columnName = input.id.replace('col-', '');
			if(input.dataset.defaultDeselected && !input.checked) return;
			if(input.dataset.defaultDeselected) includesDefaultDeselected = true;
			(input.checked ? selectedColumns : deselectedColumns).push(columnName);
		});
		
		// Determine if we should use the "-" prefix approach
		if (!includesDefaultDeselected && deselectedColumns.length === 0) {
			// All columns selected, no need for a parameter
			columnsParam.value = '';
		} else if (!includesDefaultDeselected && deselectedColumns.length < selectedColumns.length) {
			// More columns selected than deselected, use "-" prefix for deselected
			columnsParam.value = '-' + deselectedColumns.join(',');
		} else {
			// Fewer columns selected, just list the selected ones
			columnsParam.value = selectedColumns.join(',');
		}
	}
	
	// Add event listener to the form to update the columns parameter before submission
	document.querySelector('#columns-form').addEventListener('submit', function(e) {
		updateColumnSelection();
	});
	
	// Overlay panel functionality
	document.addEventListener('DOMContentLoaded', function() {
		// Column selection panel
		const columnsButton = document.getElementById('columns-button');
		const columnsPanel = document.getElementById('columns-panel');
		
		// Function to restore checkbox states based on current URL parameters
		function restoreCheckboxStatesFromURL() {
			// Get the current columns parameter from the URL
			const urlParams = new URLSearchParams(window.location.search);
			const columnsParam = urlParams.get('columns');
			
			// Default: all checkboxes should be checked unless specified otherwise
			let columnsToShow = [];
			let columnsToHide = [];
			
			if (columnsParam) {
				if (columnsParam.startsWith('-')) {
					// "-" prefix means hide these columns, show all others
					columnsToHide = columnsParam.substring(1).split(',');
				} else {
					// No prefix means show only these columns
					columnsToShow = columnsParam.split(',');
				}
			}
			
			// Update all checkboxes based on the URL parameters
			document.querySelectorAll('.column-checkbox input').forEach(input => {
				const columnName = input.id.replace('col-', '');
				const isDefaultDeselected = input.hasAttribute('data-default-deselected');
				
				if (columnsParam) {
					if (columnsParam.startsWith('-')) {
						// If using "-" prefix, check all except those in columnsToHide
						input.checked = !columnsToHide.includes(columnName);
					} else {
						// Otherwise, only check those in columnsToShow
						input.checked = columnsToShow.includes(columnName);
					}
				} else {
					// No columns parameter: check all except default deselected
					input.checked = !isDefaultDeselected;
				}
			});
		}
		
		columnsButton.addEventListener('click', function() {
			// Restore checkbox states from URL before showing the panel
			restoreCheckboxStatesFromURL();
			
			columnsPanel.classList.add('active');
			filterPanel.classList.remove('active'); // Close other panel
		});
		
		// Filter panel
		const filterButton = document.getElementById('filter-button');
		const filterPanel = document.getElementById('filter-panel');
		
		filterButton.addEventListener('click', function() {
			filterPanel.classList.add('active');
			columnsPanel.classList.remove('active'); // Close other panel
		});
		
		// Close panels when clicking cancel buttons
		document.querySelectorAll('.panel-actions .cancel').forEach(button => {
			button.addEventListener('click', function() {
				// If this is the cancel button in the columns panel, restore checkbox states from URL
				if (button.closest('#columns-panel')) {
					restoreCheckboxStatesFromURL();
				}
				
				columnsPanel.classList.remove('active');
				filterPanel.classList.remove('active');
			});
		});
		
		// Close panels when clicking outside
		document.addEventListener('click', function(e) {
			if (!columnsPanel.contains(e.target) && e.target !== columnsButton && 
				!filterPanel.contains(e.target) && e.target !== filterButton) {
				
				// If columns panel is active, restore checkbox states from URL
				if (columnsPanel.classList.contains('active')) {
					restoreCheckboxStatesFromURL();
				}
				
				columnsPanel.classList.remove('active');
				filterPanel.classList.remove('active');
			}
		});
		
		// Filter functionality
		const addFilterBtn = document.getElementById('add-filter');
		const filterConditions = document.getElementById('filter-conditions');
		
		// Add new filter condition
		addFilterBtn.addEventListener('click', function() {
			const filterCount = document.querySelectorAll('.filter-condition').length;
			const newFilter = document.querySelector('.filter-condition').cloneNode(true);
			newFilter.dataset.index = filterCount;
			
			// Clear values in the cloned filter
			newFilter.querySelector('.filter-value').value = '';
			
			// Add event listener to remove button
			newFilter.querySelector('.remove-filter').addEventListener('click', function() {
				newFilter.remove();
			});
			
			filterConditions.appendChild(newFilter);
		});
		
		// Add event listeners to existing remove buttons
		document.querySelectorAll('.remove-filter').forEach(button => {
			button.addEventListener('click', function() {
				if (document.querySelectorAll('.filter-condition').length > 1) {
					button.closest('.filter-condition').remove();
				} else {
					// If it's the last filter, just clear the value
					button.closest('.filter-condition').querySelector('.filter-value').value = '';
				}
			});
		});
		
		// Fix table column widths to prevent flip-flop effect when headers expand
		const fixTableColumnWidths = function() {
			const table = document.querySelector('.list-table');
			if (!table) return;
			
			// With absolutely positioned header content, we don't need to 
			// manually adjust column widths anymore. The browser will handle it naturally.
			// This function is kept as a placeholder in case we need to add any table
			// initialization logic in the future.
		};
		
		// Run once when the page loads
		window.addEventListener('load', function() {
			// No need to call fixTableColumnWidths anymore
		});
	});
</script>

<% 
// Helper function to generate column query parameter
function getColumnQueryParam() {
	// If all columns are selected, return empty string (default behavior)
	if (columns.selected.length === columns.all.length) {
		return '';
	}
	
	// If more columns are selected than deselected, use "-" prefix
	if (columns.selected.length > columns.all.length / 2) {
		const deselectedColumns = columns.all.filter(col => !columns.selected.includes(col));
		return '&columns=-' + deselectedColumns.join(',');
	} 
	
	// Otherwise, just list the selected columns
	return '&columns=' + columns.selected.join(',');
}

// Helper function to generate filter query parameter
function getFilterQueryParam() {
	if (!filters || filters.length === 0) {
		return '';
	}
	
	let params = '';
	filters.forEach((filter, index) => {
		params += `&filter_column[]=${encodeURIComponent(filter.column)}`;
		params += `&filter_operator[]=${encodeURIComponent(filter.operator)}`;
		params += `&filter_value[]=${encodeURIComponent(filter.value)}`;
	});
	
	return params;
}
%> 