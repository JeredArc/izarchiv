<div class="records-page">
	<h2>Messwerte</h2>
	
	<div class="records-info">
		<p>Zeige <%= records.length %> von <%= pagination.total %> Messwerten</p>
	</div>
	
	<!-- Column Selection UI -->
	<div class="column-selection">
		<h3>Spaltenauswahl</h3>
		<form action="/records" method="GET">
			<!-- Preserve existing query parameters -->
			<input type="hidden" name="page" value="<%= pagination.currentPage %>">
			<input type="hidden" name="limit" value="<%= pagination.limit %>">
			
			<div class="column-checkboxes">
				<% columns.all.forEach(column => { %>
					<div class="column-checkbox">
						<input 
							type="checkbox" 
							id="col-<%= column %>" 
							<%= columns.defaultDeselected.includes(column) ? 'data-default-deselected="true"' : '' %>
							<%= columns.selected.includes(column) ? 'checked' : '' %>
						>
						<label for="col-<%= column %>"><%= columnCaption(column) %></label>
					</div>
				<% }); %>
			</div>
			
			<input type="hidden" name="columns" id="columns-param" value="">
			<button type="submit">Anwenden</button>
		</form>
	</div>
	
	<!-- Filter UI -->
	<div class="filter-selection">
		<h3>Filter</h3>
		<form action="/records" method="GET" id="filter-form">
			<!-- Preserve existing query parameters -->
			<input type="hidden" name="page" value="1">
			<input type="hidden" name="limit" value="<%= pagination.limit %>">
			<input type="hidden" name="columns" value="<%= getColumnQueryParam().replace('&columns=', '') %>">
			
			<div id="filter-conditions">
				<% if (filters && filters.length > 0) { %>
					<% filters.forEach((filter, index) => { %>
						<div class="filter-condition" data-index="<%= index %>">
							<select name="filter_column[]" class="filter-column">
								<% columns.all.forEach(column => { %>
									<option value="<%= column %>" <%= filter.column === column ? 'selected' : '' %>>
										<%= columnCaption(column) %>
									</option>
								<% }); %>
							</select>
							<select name="filter_operator[]" class="filter-operator">
								<% Object.entries(filterOperators).forEach(op => { %>
									<option value="<%= op %>" <%= filter.operator === op ? 'selected' : '' %>><%= operatorCaption(op) %></option>
								<% }); %>
							</select>
							<input type="text" name="filter_value[]" class="filter-value" value="<%= filter.value %>" placeholder="Wert">
							<button type="button" class="remove-filter">Entfernen</button>
						</div>
					<% }); %>
				<% } else { %>
					<div class="filter-condition" data-index="0">
						<select name="filter_column[]" class="filter-column">
							<% columns.all.forEach(column => { %>
								<option value="<%= column %>"><%= columnCaption(column) %></option>
							<% }); %>
						</select>
						<select name="filter_operator[]" class="filter-operator">
							<% Object.entries(filterOperators).forEach(op => { %>
								<option value="<%= op %>"><%= operatorCaption(op) %></option>
							<% }); %>
						</select>
						<input type="text" name="filter_value[]" class="filter-value" placeholder="Wert">
						<button type="button" class="remove-filter">Entfernen</button>
					</div>
				<% } %>
			</div>
			
			<div class="filter-actions">
				<button type="button" id="add-filter">Filter hinzufügen</button>
				<button type="submit">Anwenden</button>
				<% if (filters && filters.length > 0) { %>
					<a href="/records?columns=<%= getColumnQueryParam().replace('&columns=', '') %>" class="clear-filters">Filter zurücksetzen</a>
				<% } %>
			</div>
		</form>
	</div>
	
	<table>
		<thead>
			<tr>
				<!-- ID column is always displayed -->
				<th>#</th>
				<!-- Dynamic columns -->
				<% columns.selected.forEach(column => { %>
					<th><%= columnCaption(column) %></th>
				<% }); %>
			</tr>
		</thead>
		<tbody>
			<% records.forEach(record => { %>
				<tr>
					<!-- ID column is always displayed -->
					<td><a href="/record/<%= record.id %>"><%= record.id %></a></td>
					<!-- Dynamic columns -->
					<% columns.selected.forEach(column => {
						let { value, link, classes } = record.columnOutput(column);
						%>
						<td class="<%= classes.join(' ') %>">
							<% if (link) { %>
								<a href="<%= link %>"><%= value %></a>
							<% } else { %>
								<%= value %>
							<% } %>
						</td>
					<% }); %>
				</tr>
			<% }); %>
		</tbody>
	</table>

	<% if (pagination.totalPages > 1) { %>
		<div class="pagination">
			<% if (pagination.currentPage > 1) { %>
				<a href="/records?page=1<%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&laquo;</a>
				<a href="/records?page=<%= pagination.currentPage - 1 %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&lsaquo;</a>
			<% } %>
			
			<% for (let i = Math.max(1, pagination.currentPage - 2); i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) { %>
				<a href="/records?page=<%= i %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link <%= i === pagination.currentPage ? 'active' : '' %>"><%= i %></a>
			<% } %>
			
			<% if (pagination.currentPage < pagination.totalPages) { %>
				<a href="/records?page=<%= pagination.currentPage + 1 %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&rsaquo;</a>
				<a href="/records?page=<%= pagination.totalPages %><%= getColumnQueryParam() %><%= getFilterQueryParam() %>" class="pagination-link">&raquo;</a>
			<% } %>
		</div>
	<% } %>
</div>

<script>
	// Helper function to update column selection
	function updateColumnSelection(checkbox) {
		const columnsParam = document.getElementById('columns-param');
		const selectedColumns = [];
		const deselectedColumns = [];
		let includesDefaultDeselected = false;
		
		// Collect all checked columns
		document.querySelectorAll('.column-checkbox input').forEach(input => {
			const columnName = input.id.replace('col-', '');
			if(input.dataset.defaultDeselected && !input.checked) return;
			if(input.dataset.defaultDeselected) includesDefaultDeselected = true;
			(input.checked ? selectedColumns : deselectedColumns).push(columnName);
		});
		
		// Determine if we should use the "-" prefix approach
		if (!includesDefaultDeselected && deselectedColumns.length === 0) {
			// All columns selected, no need for a parameter
			columnsParam.value = '';
		} else if (!includesDefaultDeselected && deselectedColumns.length < selectedColumns.length) {
			// More columns selected than deselected, use "-" prefix for deselected
			columnsParam.value = '-' + deselectedColumns.join(',');
		} else {
			// Fewer columns selected, just list the selected ones
			columnsParam.value = selectedColumns.join(',');
		}
	}
	
	// Add event listener to the form to update the columns parameter before submission
	document.querySelector('.column-selection form').addEventListener('submit', function(e) {
		updateColumnSelection();
	});
	
	// Filter functionality
	document.addEventListener('DOMContentLoaded', function() {
		const addFilterBtn = document.getElementById('add-filter');
		const filterConditions = document.getElementById('filter-conditions');
		
		// Add new filter condition
		addFilterBtn.addEventListener('click', function() {
			const filterCount = document.querySelectorAll('.filter-condition').length;
			const newFilter = document.querySelector('.filter-condition').cloneNode(true);
			newFilter.dataset.index = filterCount;
			
			// Clear values in the cloned filter
			newFilter.querySelector('.filter-value').value = '';
			
			// Add event listener to remove button
			newFilter.querySelector('.remove-filter').addEventListener('click', function() {
				newFilter.remove();
			});
			
			filterConditions.appendChild(newFilter);
		});
		
		// Add event listeners to existing remove buttons
		document.querySelectorAll('.remove-filter').forEach(button => {
			button.addEventListener('click', function() {
				if (document.querySelectorAll('.filter-condition').length > 1) {
					button.closest('.filter-condition').remove();
				} else {
					// If it's the last filter, just clear the value
					button.closest('.filter-condition').querySelector('.filter-value').value = '';
				}
			});
		});
	});
</script>

<% 
// Helper function to generate column query parameter
function getColumnQueryParam() {
	// If all columns are selected, return empty string (default behavior)
	if (columns.selected.length === columns.all.length) {
		return '';
	}
	
	// If more columns are selected than deselected, use "-" prefix
	if (columns.selected.length > columns.all.length / 2) {
		const deselectedColumns = columns.all.filter(col => !columns.selected.includes(col));
		return '&columns=-' + deselectedColumns.join(',');
	} 
	
	// Otherwise, just list the selected columns
	return '&columns=' + columns.selected.join(',');
}

// Helper function to generate filter query parameter
function getFilterQueryParam() {
	if (!filters || filters.length === 0) {
		return '';
	}
	
	let params = '';
	filters.forEach((filter, index) => {
		params += `&filter_column[]=${encodeURIComponent(filter.column)}`;
		params += `&filter_operator[]=${encodeURIComponent(filter.operator)}`;
		params += `&filter_value[]=${encodeURIComponent(filter.value)}`;
	});
	
	return params;
}
%> 